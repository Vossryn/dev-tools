/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ToolsIndexRouteImport } from './routes/tools/index'
import { Route as ToolsPixelConverterRouteImport } from './routes/tools/pixel-converter'
import { Route as ToolsImageConverterRouteImport } from './routes/tools/image-converter'
import { Route as ToolsColorConverterRouteImport } from './routes/tools/color-converter'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ToolsIndexRoute = ToolsIndexRouteImport.update({
  id: '/tools/',
  path: '/tools/',
  getParentRoute: () => rootRouteImport,
} as any)
const ToolsPixelConverterRoute = ToolsPixelConverterRouteImport.update({
  id: '/tools/pixel-converter',
  path: '/tools/pixel-converter',
  getParentRoute: () => rootRouteImport,
} as any)
const ToolsImageConverterRoute = ToolsImageConverterRouteImport.update({
  id: '/tools/image-converter',
  path: '/tools/image-converter',
  getParentRoute: () => rootRouteImport,
} as any)
const ToolsColorConverterRoute = ToolsColorConverterRouteImport.update({
  id: '/tools/color-converter',
  path: '/tools/color-converter',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/tools/color-converter': typeof ToolsColorConverterRoute
  '/tools/image-converter': typeof ToolsImageConverterRoute
  '/tools/pixel-converter': typeof ToolsPixelConverterRoute
  '/tools': typeof ToolsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/tools/color-converter': typeof ToolsColorConverterRoute
  '/tools/image-converter': typeof ToolsImageConverterRoute
  '/tools/pixel-converter': typeof ToolsPixelConverterRoute
  '/tools': typeof ToolsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/tools/color-converter': typeof ToolsColorConverterRoute
  '/tools/image-converter': typeof ToolsImageConverterRoute
  '/tools/pixel-converter': typeof ToolsPixelConverterRoute
  '/tools/': typeof ToolsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/tools/color-converter'
    | '/tools/image-converter'
    | '/tools/pixel-converter'
    | '/tools'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/tools/color-converter'
    | '/tools/image-converter'
    | '/tools/pixel-converter'
    | '/tools'
  id:
    | '__root__'
    | '/'
    | '/tools/color-converter'
    | '/tools/image-converter'
    | '/tools/pixel-converter'
    | '/tools/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ToolsColorConverterRoute: typeof ToolsColorConverterRoute
  ToolsImageConverterRoute: typeof ToolsImageConverterRoute
  ToolsPixelConverterRoute: typeof ToolsPixelConverterRoute
  ToolsIndexRoute: typeof ToolsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tools/': {
      id: '/tools/'
      path: '/tools'
      fullPath: '/tools'
      preLoaderRoute: typeof ToolsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tools/pixel-converter': {
      id: '/tools/pixel-converter'
      path: '/tools/pixel-converter'
      fullPath: '/tools/pixel-converter'
      preLoaderRoute: typeof ToolsPixelConverterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tools/image-converter': {
      id: '/tools/image-converter'
      path: '/tools/image-converter'
      fullPath: '/tools/image-converter'
      preLoaderRoute: typeof ToolsImageConverterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tools/color-converter': {
      id: '/tools/color-converter'
      path: '/tools/color-converter'
      fullPath: '/tools/color-converter'
      preLoaderRoute: typeof ToolsColorConverterRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ToolsColorConverterRoute: ToolsColorConverterRoute,
  ToolsImageConverterRoute: ToolsImageConverterRoute,
  ToolsPixelConverterRoute: ToolsPixelConverterRoute,
  ToolsIndexRoute: ToolsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
